
# MongoDB Atlas Integration Guide

## Why MongoDB Atlas?
MongoDB Atlas offers a cloud-native, fully-managed database service that eliminates the need for manual SQL table creation or strict schema definitions. It automatically stores data based on the structure of the input provided, making development faster and more flexible. With its cloud-native setup, MongoDB Atlas manages scaling, performance, and security, allowing us to focus on building the core functionality of the app without worrying about complex database configurations.

## Data Structure for FinTrack Application

The MongoDB Atlas database would include the following collections:

1. **users**
   - _id: ObjectId (automatically generated)
   - name: String
   - email: String
   - imageUrl: String
   - preferences: Object
     - showDebtFeature: Boolean
     - showAllAccountsAnalysis: Boolean
   - createdAt: Date
   - updatedAt: Date

2. **accounts**
   - _id: ObjectId (automatically generated)
   - userId: ObjectId (reference to users collection)
   - name: String
   - balance: Number
   - isActive: Boolean
   - createdAt: Date
   - updatedAt: Date

3. **transactions**
   - _id: ObjectId (automatically generated)
   - accountId: ObjectId (reference to accounts collection)
   - userId: ObjectId (reference to users collection)
   - date: Date
   - grossEarnings: Number
   - commission: Number
   - tax: Number
   - investment: Number
   - spending: Number
   - debt: Number
   - savings: Number
   - note: String
   - createdAt: Date
   - updatedAt: Date

4. **monthlyData**
   - _id: ObjectId (automatically generated)
   - userId: ObjectId (reference to users collection)
   - accountId: ObjectId (reference to accounts collection)
   - year: Number
   - month: Number
   - remaining: Number
   - income: Number
   - expenses: Number
   - toBeCredited: Number
   - salary: Number
   - createdAt: Date
   - updatedAt: Date

## Integration Steps

1. **Setup MongoDB Atlas**
   - Create a MongoDB Atlas account
   - Set up a new cluster
   - Configure network access and database users
   - Get connection string

2. **Backend Integration**
   - Install MongoDB driver for your backend
   - Create connection to MongoDB Atlas using the connection string
   - Set up models/schemas for the collections
   - Implement CRUD operations for each collection

3. **Frontend Integration**
   - Create API service to interact with backend
   - Use React Query for state management and data fetching
   - Implement loading and error states
   - Add pagination and filtering for large data sets

4. **Data Migration**
   - Export existing data from local storage
   - Transform data to match MongoDB schema
   - Import data into MongoDB Atlas
   - Validate data integrity

5. **Authentication**
   - Implement JWT authentication
   - Set up user roles and permissions
   - Secure API endpoints

## Sample MongoDB Atlas Connection

```javascript
import { MongoClient } from 'mongodb';

const uri = "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<dbname>?retryWrites=true&w=majority";
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

async function connect() {
  try {
    await client.connect();
    console.log("Connected to MongoDB Atlas");
    const database = client.db("fintrack");
    
    // Example: Query users
    const usersCollection = database.collection("users");
    const users = await usersCollection.find({}).toArray();
    console.log(`Found ${users.length} users`);
    
    // Example: Add transaction
    const transactionsCollection = database.collection("transactions");
    const result = await transactionsCollection.insertOne({
      accountId: "accountObjectId",
      userId: "userObjectId",
      date: new Date(),
      grossEarnings: 1000,
      commission: 100,
      tax: 150,
      investment: 200,
      spending: 300,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    console.log(`Inserted transaction with id: ${result.insertedId}`);
    
  } catch (error) {
    console.error("Error connecting to MongoDB Atlas", error);
  }
}

connect();
```

## Benefits Over Current Local Storage Implementation

1. **Data Persistence**: Data stored in MongoDB Atlas is persistent and not browser-dependent.
2. **Data Relationships**: MongoDB can handle complex data relationships.
3. **Scalability**: Easily scale as your data grows without performance issues.
4. **Multi-user Support**: Support multiple users with proper authentication.
5. **Real-time Updates**: Can implement real-time updates using MongoDB change streams.
6. **Data Analysis**: Powerful aggregation framework for complex data analysis.
7. **Backup and Recovery**: Automated backups and point-in-time recovery.
